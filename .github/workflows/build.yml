name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (test or release)'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - release

jobs:
  build:
    name: Build wheels on ${{ matrix.platform_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          - os: windows-latest
            platform_name: "Windows x64"
            target: x86_64-pc-windows-msvc
          # macOS Intel (x86_64)
          - os: macos-12
            platform_name: "macOS Intel"
            target: x86_64-apple-darwin
          # macOS Apple Silicon (ARM64)
          - os: macos-14
            platform_name: "macOS Apple Silicon"
            target: aarch64-apple-darwin
          # Linux x64
          - os: ubuntu-latest
            platform_name: "Linux x64"
            target: x86_64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Install Python (Windows specific)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # 确保Python开发库可用
        python -m pip install --upgrade pip
        # 检查Python安装
        python -c "import sys; print('Python:', sys.executable)"
        python -c "import sysconfig; print('Lib path:', sysconfig.get_path('stdlib'))"
        # 设置Windows构建环境变量 
        $libPath = python -c "import sysconfig; print(sysconfig.get_path('stdlib'))"
        echo "PYO3_CROSS_LIB_DIR=$libPath" >> $env:GITHUB_ENV
        # 强制使用abi3模式，避免链接特定Python版本库
        echo "PYO3_NO_PYTHON=1" >> $env:GITHUB_ENV

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      env:
        # Windows特定环境变量
        PYO3_USE_ABI3_FORWARD_COMPATIBILITY: "1"
        # 强制abi3模式避免链接python3x.lib
        PYO3_NO_PYTHON: "1"
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --interpreter 3.8 3.9 3.10 3.11 3.12
        sccache: 'true'
        manylinux: auto

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform_name }}-${{ matrix.target }}
        path: dist/*.whl

  publish:
    name: Release to PyPI
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'release')"
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List downloaded wheels by platform
        run: |
          echo "=== All downloaded wheel files ==="
          find dist -name "*.whl" -type f | sort
          echo ""
          echo "=== Platform breakdown ==="
          echo "Windows wheels:"
          find dist -name "*win*.whl" -o -name "*windows*.whl" | wc -l
          echo "macOS Intel wheels:"
          find dist -name "*x86_64*darwin*.whl" | wc -l
          echo "macOS Apple Silicon wheels:"
          find dist -name "*aarch64*darwin*.whl" -o -name "*arm64*darwin*.whl" | wc -l
          echo "Linux wheels:"
          find dist -name "*linux*.whl" | wc -l
          echo ""
          echo "Total wheels: $(find dist -name "*.whl" | wc -l)"
      
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*.whl